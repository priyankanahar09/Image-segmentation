#set Data path

import os
import albumentations as A
import cv2
import torch
from torch.utils.data import Dataset, DataLoader
import matplotlib.pyplot as plt
import numpy as np


current_path = os.getcwd()
data_folder = os.path.join(current_path, "png")

Train = os.path.join(data_folder, "train") 
Train_label = os.path.join(data_folder, "train_labels")

Val = os.path.join(data_folder, "val") 
Val_label = os.path.join(data_folder, "val_labels")

Test = os.path.join(data_folder, "test") 
Test_label = os.path.join(data_folder, "test_labels")


class AerialDataset(Dataset):
    def __init__(self, image_folder, mask_folder, transform=None):
        self.image_folder = image_folder
        self.mask_folder = mask_folder
        self.transform = transform
        self.image_files = sorted([os.path.join(image_folder, f) for f in os.listdir(image_folder) if os.path.isfile(os.path.join(image_folder, f))])
        self.mask_files = sorted([os.path.join(mask_folder, f) for f in os.listdir(mask_folder) if os.path.isfile(os.path.join(mask_folder, f))])

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        img_path = self.image_files[idx]
        mask_path = self.mask_files[idx]
        
        image = cv2.imread(img_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)

        if self.transform:
            transformed = self.transform(image=image, mask=mask)
            image = transformed['image']
            mask = transformed['mask']

        # Normalize the image and convert mask to binary
        image = image.astype(np.float32) / 255.0
        mask = mask.astype(np.float32) / 255.0
        mask = (mask > 0.5).astype(np.float32)

        # Transpose the dimensions to match PyTorch's expectation: [C, H, W]
        image = np.transpose(image, (2, 0, 1))

        return torch.tensor(image, dtype=torch.float32), torch.tensor(mask, dtype=torch.float32)

# Define the transformation
transform = A.Compose([
    A.Resize(512, 512),
    A.HorizontalFlip(p=0.5),
    A.VerticalFlip(p=0.5)
])

# Set up dataset and dataloader
image_folder = Train
mask_folder = Train_label

dataset = AerialDataset(image_folder, mask_folder, transform=transform)
dataloader = DataLoader(dataset, batch_size=4, shuffle=True)

# Visualize some examples from the dataloader
def visualize_batch(dataloader):
    batch = next(iter(dataloader))
    images, masks = batch
    
    images = images.permute(0, 2, 3, 1).numpy()  # Convert to [batch, height, width, channels]
    masks = masks.numpy()
    
    plt.figure(figsize=(10, 5))
    for i in range(len(images)):
        plt.subplot(2, len(images), i + 1)
        plt.imshow(images[i])
        plt.axis('off')

        plt.subplot(2, len(images), i + 1 + len(images))
        plt.imshow(masks[i], cmap='gray')
        plt.axis('off')
    plt.show()

# Visualize a batch
visualize_batch(dataloader)

# Paths to validation and test image/mask folders
valid_image_folder = Val
valid_mask_folder = Val_label
test_image_folder = Test
test_mask_folder = Test_label

# Create validation and test datasets
valid_dataset = AerialDataset(valid_image_folder, valid_mask_folder, transform=transform)
test_dataset = AerialDataset(test_image_folder, test_mask_folder, transform=transform)


# DataLoaders for validation and test sets
validation_dataloader = DataLoader(valid_dataset, shuffle=False)
test_dataloader = DataLoader(test_dataset, shuffle=False)

